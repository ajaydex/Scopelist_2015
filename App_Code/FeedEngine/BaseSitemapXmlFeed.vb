Imports System.Collections.ObjectModel
Imports System.IO
Imports System.Text.RegularExpressions
Imports System.Xml
Imports BVSoftware.Bvc5.Core

Namespace FeedEngine

    Public MustInherit Class BaseSitemapXmlFeed
        Inherits BaseSitemapFeed

        Protected xw As XmlWriter

        Sub New(ByVal componentId As String)
            MyBase.New(componentId)
        End Sub

        Public Overrides Sub GenerateFeed()
            AuditLog.LogEvent(BVSoftware.Commerce.Metrics.AuditLogSourceModule.Plugins, BVSoftware.Commerce.Metrics.AuditLogEntrySeverity.Information, Me.FeedName, "GenerateFeed() started")

            Try
                Me.Feed = New FileStream(Me.PhysicalFilePath, FileMode.Create)

                ' setup XmlWriter
                Dim xws As New XmlWriterSettings()
                xws.Encoding = Me.FeedEncoding
                xws.CheckCharacters = True
                xws.Indent = True
                xws.IndentChars = ControlChars.Tab

                Me.xw = XmlWriter.Create(Me.Feed, xws)

                Me.WriteRootStartElement()
                Me.Generate()
                Me.WriteRootEndElement()

                AuditLog.LogEvent(BVSoftware.Commerce.Metrics.AuditLogSourceModule.Plugins, BVSoftware.Commerce.Metrics.AuditLogEntrySeverity.Success, Me.FeedName, "GenerateFeed() complete")
            Catch ex As Exception
                AuditLog.LogException(ex)
            Finally
                If Me.Feed IsNot Nothing Then
                    Me.Feed.Flush()
                    Me.Feed.Close()
                    Me.Feed.Dispose()
                End If
            End Try

            ' memory cleanup - clear large in-memory objects
            Me._Products = Nothing
            Me._Categories = Nothing
            Me._CustomPages = Nothing
            Me._AdditionalPages = Nothing
        End Sub

        Protected Overrides Sub Generate()
            ' Homepage
            Me.WritePage(Me.GetHomepageUrl(), DateTime.Now, "daily", 1D)

            ' Categories
            For Each c As Catalog.Category In Me.Categories
                WriteCategoryPage(c)
            Next
            Me._Categories = Nothing

            ' Product pages
            For Each p As Catalog.Product In Me.Products
                WriteProductPage(p)
            Next
            Me._Products = Nothing

            ' Custom Pages
            For Each cp As Content.CustomPage In Me.CustomPages
                WriteCustomPage(cp)
            Next
            Me._CustomPages = Nothing

            ' additional pages
            For Each ap As Hashtable In Me.AdditionalPages
                WriteAdditionalPage(ap)
            Next
            Me._AdditionalPages = Nothing
        End Sub

        Protected Overrides Sub Write(ByVal value As String)
            xw.WriteString(value)
        End Sub

#Region " XML Functions "

        Protected Overridable Sub WriteRootStartElement()
            xw.WriteStartDocument()
            xw.WriteStartElement("urlset", "http://www.sitemaps.org/schemas/sitemap/0.9")
            xw.WriteComment(" Generated by BV Commerce 2013 - http://www.bvcommerce.com/ ")
        End Sub

        Protected Overridable Sub WriteRootEndElement()
            xw.WriteEndElement() '/urlset
            xw.WriteEndDocument()
            xw.Flush()
        End Sub

        Protected Overridable Overloads Sub WritePage(ByVal url As String)
            Me.WritePage(url, Me.DefaultLastMod, Me.DefaultChangeFreq, Me.DefaultPriority)
        End Sub

        Protected Overridable Overloads Sub WritePage(ByVal url As String, ByVal lastmod As DateTime, ByVal changefreq As String, ByVal priority As Decimal)
            xw.WriteStartElement("url")
            xw.WriteElementString("loc", url)
            xw.WriteElementString("lastmod", lastmod.ToString(Me.DateFormat))
            xw.WriteElementString("changefreq", changefreq)
            xw.WriteElementString("priority", priority.ToString("0.0"))
            xw.WriteEndElement() '/url
        End Sub

        Protected Overridable Sub WriteCategoryPage(ByRef c As Catalog.Category)
            WritePage(Me.CreateCategoryUrl(c), c.LastUpdated, Me.DefaultChangeFreq, Me.GetCategoryPriority(c))
        End Sub

        Protected Overridable Sub WriteProductPage(ByRef p As Catalog.Product)
            WritePage(Me.CreateProductUrl(p), p.LastUpdated, Me.DefaultChangeFreq, 0.5D)
        End Sub

        Protected Overridable Sub WriteCustomPage(ByRef cp As Content.CustomPage)
            WritePage(Me.CreateCustomPageUrl(cp), cp.LastUpdated, Me.DefaultChangeFreq, 0.7D)
        End Sub

        Protected Overridable Sub WriteAdditionalPage(ByRef ap As Hashtable)
            If ap IsNot Nothing AndAlso ap.Count > 0 Then
                ' if we have no URL, abandon
                If Not ap.ContainsKey("url") Then
                    Return
                End If

                Dim url As String = Me.CreateFullyQualifiedUrl(ap("url").ToString())

                Dim priority As Decimal = Me.DefaultPriority
                If ap.ContainsKey("priority") Then
                    Try
                        priority = System.Convert.ToDecimal(ap("priority").ToString())
                    Catch ex As Exception
                        ' do nothing
                    End Try
                End If

                Dim changefreq As String = Me.DefaultChangeFreq
                If ap.ContainsKey("changefreq") Then
                    Dim customchangefreq As String = ap("changefreq").ToString().ToLower().Trim()
                    Select Case (customchangefreq)
                        Case "always", _
                                "hourly", _
                                "daily", _
                                "weekly", _
                                "monthly", _
                                "yearly", _
                                "never"

                            changefreq = customchangefreq

                        Case Else
                            ' do nothing - use default value
                    End Select
                End If

                Dim lastmod As DateTime = Me.DefaultLastMod
                If ap.ContainsKey("lastmod") Then
                    Try
                        lastmod = System.Convert.ToDateTime(ap("lastmod").ToString())
                    Catch ex As Exception
                        ' do nothing
                    End Try
                End If

                WritePage(url, lastmod, changefreq, priority)
            End If
        End Sub

#End Region

#Region " Text file Functions "

        Protected Overrides Sub AddHeaderRow()
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files. Use the WriteRootStartElement method instead.")
        End Sub

        Protected Overrides Sub AddProductRow(ByRef p As BVSoftware.BVC5.Core.Catalog.Product)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files. Use the WriteProductPage method instead.")
        End Sub

        Protected Overrides Sub AddCategoryRow(ByRef c As BVSoftware.BVC5.Core.Catalog.Category)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files. Use the WriteCategoryPage method instead.")
        End Sub

        Protected Overrides Sub AddCustomPageRow(ByRef cp As BVSoftware.BVC5.Core.Content.CustomPage)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files. Use the WriteCustomPage method instead.")
        End Sub

        Protected Overrides Sub AddAdditionalPageRow(ByRef ap As System.Collections.Hashtable)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files. Use the WriteAdditionalPage method instead.")
        End Sub

        Protected Overrides Sub AddRow(ByVal ParamArray values() As String)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files. Use the WritePage method instead.")
        End Sub

        Protected Overrides Sub AddColumn(ByVal value As String)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files.")
        End Sub

        Protected Overrides Sub AddColumn(ByVal value As String, ByVal maxLength As Integer)
            Throw New NotImplementedException("BaseSitemapXmlFeed and inherited classes generate XML files, not flat text files.")
        End Sub

#End Region

    End Class

End Namespace