Imports System.Collections.ObjectModel
Imports System.IO
Imports System.Text.RegularExpressions
Imports BVSoftware.Bvc5.Core

Namespace FeedEngine.Sitemaps

    Public Class GoogleSitemap
        Inherits BaseSitemapXmlFeed

        Private Const COMPONENTID As String = "33775C61-7388-4b28-8BB2-F3D866E21A7C"

        Private _IncludeProductImages As Boolean

#Region " Default Properties "

        Protected Overrides ReadOnly Property DEFAULT_FEEDNAME() As String
            Get
                Return "Google Sitemap"
            End Get
        End Property

        Protected Overrides ReadOnly Property DEFAULT_FILENAME() As String
            Get
                Return "sitemap.xml"
            End Get
        End Property

        Protected Overrides ReadOnly Property DEFAULT_FILEPATH() As String
            Get
                Return String.Empty
            End Get
        End Property

        Protected Overridable ReadOnly Property DEFAULT_INCLUDEPRODUCTIMAGES() As Boolean
            Get
                Return False
            End Get
        End Property

#End Region

#Region " Properties "

        Public Overridable Property IncludeProductImages() As Boolean
            Get
                Return Me._IncludeProductImages
            End Get
            Set(ByVal value As Boolean)
                Me._IncludeProductImages = value
            End Set
        End Property

#End Region

        Sub New()
            MyBase.New(COMPONENTID)

            Me.SettingsManager = New Datalayer.ComponentSettingsManager(COMPONENTID)

            Dim setting As String = String.Empty

            setting = Me.SettingsManager.GetSetting("IncludeProductImages")
            Me._IncludeProductImages = If(Not String.IsNullOrEmpty(setting), System.Convert.ToBoolean(setting), Me.DEFAULT_INCLUDEPRODUCTIMAGES)
        End Sub

        Public Overrides Sub SaveSettings()
            MyBase.SaveSettings()

            Me.SettingsManager.SaveSetting("IncludeProductImages", Me.IncludeProductImages.ToString(), "Develisys", "Product Feed", Me.FeedName)
        End Sub

        Public Overrides Function GenerateFeedAndUpload() As Boolean
            GenerateFeed()

            If Me.PingSearchEngines Then
                PingAllSearchEngines()
            End If

            Return UploadFile()
        End Function

        Protected Overrides Sub WriteRootStartElement()
            xw.WriteStartDocument()
            xw.WriteStartElement("urlset", "http://www.sitemaps.org/schemas/sitemap/0.9")

            If Me.IncludeProductImages Then
                xw.WriteAttributeString("xmlns", "image", Nothing, "http://www.google.com/schemas/sitemap-image/1.1")
            End If

            xw.WriteComment(" Generated by BV Commerce 2013 - http://www.bvcommerce.com/ ")
        End Sub

        Protected Overrides Sub WriteProductPage(ByRef p As Catalog.Product)
            xw.WriteStartElement("url")
            xw.WriteElementString("loc", Me.CreateProductUrl(p))
            xw.WriteElementString("lastmod", p.LastUpdated.ToString(Me.DateFormat))
            xw.WriteElementString("changefreq", Me.DefaultChangeFreq)
            xw.WriteElementString("priority", Me.DefaultPriority)

            ' Product images
            If Me.IncludeProductImages Then
                Dim mediumImage As New Catalog.ProductImage()
                mediumImage.Bvin = p.Bvin   ' fake the bvin to pass data checks in CreateProductAdditionalImageUrl method
                mediumImage.FileName = p.ImageFileMedium
                mediumImage.ProductId = p.Bvin

                Dim productImages As Collection(Of Catalog.ProductImage) = Catalog.ProductImage.FindByProductId(p.Bvin)
                productImages.Insert(0, mediumImage)

                For Each pi As Catalog.ProductImage In Catalog.ProductImage.FindByProductId(p.Bvin)
                    Dim imageUrl As String = Me.CreateProductAdditionalImageUrl(pi)
                    Dim title As String = Me.CleanXmlText(If(String.IsNullOrEmpty(pi.AlternateText), p.ProductName, pi.AlternateText))
                    Dim caption As String = Me.CleanXmlText(pi.Caption)

                    If Not String.IsNullOrEmpty(imageUrl) Then
                        xw.WriteStartElement("image", "image", Nothing)

                        xw.WriteStartElement("image", "loc", Nothing)
                        xw.WriteString(imageUrl)
                        xw.WriteEndElement()

                        If Not String.IsNullOrEmpty(title) Then
                            xw.WriteStartElement("image", "title", Nothing)
                            xw.WriteString(title)
                            xw.WriteEndElement()
                        End If

                        If Not String.IsNullOrEmpty(caption) Then
                            xw.WriteStartElement("image", "caption", Nothing)
                            xw.WriteString(caption)
                            xw.WriteEndElement()
                        End If

                        xw.WriteEndElement() '/image:image
                    End If
                Next
            End If

            xw.WriteEndElement() '/url
        End Sub

    End Class

End Namespace